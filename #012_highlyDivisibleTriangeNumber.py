"""
Highly divisible triangular number

Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

def count_divisables(num):
    r = 2
    count = 1
    while r*r <= num:
        if num%r == 0:
            count = count+2
        r = r+1
    return count


def find_triangle(target):
    # triangleNum = [0,1]
    # n = len(triangleNum)-1
    # while count_divisables(triangleNum[n]) <= target:
    #     n = len(triangleNum)
    #     print(n, end=" ")
    #     triangleNum.append(triangleNum[n-1]+n)
    # return triangleNum[n]

    x = 1
    triangleNum = 1
    count = count_divisables(triangleNum)
    while count<=target:
        # print(triangleNum,count)
        triangleNum = (x*(x+1))//2
        # print(f"triangle number {triangleNum}")
        x = x+1
        count = count_divisables(triangleNum)
    return triangleNum


if __name__ == "__main__":
    target = 500
    result = find_triangle(target)
    print(f"The target is {target}")
    print(f"The triangle number is {result}")


# Sample:

# The target is 500
# The triangle number is 76576500